oprint = print
Uxn = require "uxn"
bit = require "bit"
local math = require "math"
devices = require "love-devices"

Device = require "device"

function setupCPU(mem)
  local cpu = Uxn:new(mem)
  cpu.ip = 256

  console = cpu:add_device(1, devices.console)
  screen = cpu:add_device(2, devices.screen)
  system = cpu:add_device(0, Device:new())
  controller = cpu:add_device(8, devices.controller)

  system:addPort(8, true, nil, nil)
  system:addPort(10, true, nil, nil)
  system:addPort(12, true, nil, nil)

  return cpu
end

function love.load()
  love.graphics.setDefaultFilter( "nearest", "nearest"  )
 
  love.graphics.setBackgroundColor(1,1,1)
  love.graphics.setBackgroundColor(love.math.random(), love.math.random(), love.math.random())
  ehco_mem = {
  0x20, 0x01, 0x07, -- #0107
  0x80, 0x10, -- #10
  0x37, -- DEO2
  0x00, -- BRK
  0x80, 0x12, -- #12
  0x16, -- DEI
  0x03, -- DUP
  0x80, 0x18, -- #18
  0x17, -- DEO
  0x80, 0x19, -- #19
  0x17, -- DEO
  0x00 -- BRK
  }

  point_mem = {
    0x20, 0x2c, 0xe9, 
    0x80, 0x8,
    0x37,
    0x20, 0x1, 0xc0,
    0x80, 0xa,
    0x37,
    0x20, 0x2c, 0xe5,
    0x80, 0xc,
    0x37,
    0x20, 0x0, 0x8,
    0x80, 0x28,
    0x37,
    0x20, 0x0, 0x8,
    0x80, 0x2a,
    0x37,
    0x80, 0x11,
    0x80, 0x2e,
    0x17, }

  line_mem = {
    0x20,0x20,0xe9,
    0x80,0x8,
    0x37,

    0x20,0x0e,0xc0,
    0x80,0xa,
    0x37,
    
    0x20,0x2c,0xe5,
    0x80,0xc,
    0x37,
    
    0x20,0x0,0x8,
    0x80,0x28,
    0x37,
    
    0x20,0x0,0x08,
    0x80,0x2a,
    0x37,

    0x80,0x11,
    0x80,0x2e,
    0x17,

    0x80,0x28,
    0x36,
    0x21,
    0x80,0x28,
    0x37,
    
    0x80,0x11,
    0x80,0x2e,
    0x17,

    0x80,0x28,0x36,0x21,0x80,0x28,0x37,0x80,0x11,0x80,0x2e,0x17,0x80,0x28,0x36,0x21,0x80,0x28,0x37,0x80,0x11,0x80,0x2e,0x17,0x80,0x28,0x36,0x21,0x80,0x28,0x37,0x80,0x11,0x80,0x2e,0x17,0x80,0x28,0x36,0x21,0x80,0x28,0x37,0x80,0x11,0x80,0x2e,0x17}

  mem = {0x20, 0x2c, 0xe9, 0x80, 0x8, 0x37, 0x20, 0x1, 0xc0, 0x80, 0xa, 0x37, 0x20, 0x2c, 0xe5, 0x80, 0xc, 0x37, 0x20, 0x0, 0x8, 0x80, 0x28, 0x37, 0x20, 0x0, 0x8, 0x80, 0x2a, 0x37, 0x20, 0x2, 0x1d, 0x80, 0x2c, 0x37, 0x80, 0x80, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x81, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x82, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x83, 0x80, 0x2f, 0x17, 0x80, 0x2a, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x2a, 0x37, 0x20, 0x0, 0x8, 0x80, 0x28, 0x37, 0x80, 0x84, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x85, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x86, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x87, 0x80, 0x2f, 0x17, 0x80, 0x2a, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x2a, 0x37, 0x20, 0x0, 0x8, 0x80, 0x28, 0x37, 0x80, 0x88, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x89, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x8a, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x8b, 0x80, 0x2f, 0x17, 0x80, 0x2a, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x2a, 0x37, 0x20, 0x0, 0x8, 0x80, 0x28, 0x37, 0x80, 0x8c, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x8d, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x8e, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0xc, 0x38, 0x80, 0x28, 0x37, 0x80, 0x8f, 0x80, 0x2f, 0x17, 0x0, 0x1, 0x7f, 0x7b, 0x73, 0x63, 0x43, 0x7f, 0xff, 0x0, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x0, 0x0, }
  mem = {0x20, 0x1, 0x43, 0x80, 0x20, 0x37, 0x20, 0xf0, 0x7f, 0x80, 0x8, 0x37, 0x20, 0xf0, 0xe0, 0x80, 0xa, 0x37, 0x20, 0xf0, 0xc0, 0x80, 0xc, 0x37, 0x80, 0x22, 0x36, 0x80, 0x1, 0x3f, 0x20, 0x0, 0x20, 0x39, 0x80, 0x2, 0x31, 0x80, 0x24, 0x36, 0x80, 0x1, 0x3f, 0x80, 0x4, 0x31, 0x20, 0x1, 0xd4, 0x2e, 0x20, 0x2, 0x2f, 0x2e, 0x20, 0x2, 0x71, 0x2e, 0x20, 0x2, 0xae, 0x2e, 0x20, 0x3, 0x3a, 0x2e, 0x0, 0x80, 0x0, 0x30, 0x21, 0x23, 0x80, 0x0, 0x31, 0x80, 0x2, 0x30, 0x20, 0x0, 0x48, 0x38, 0x80, 0x28, 0x37, 0x80, 0x4, 0x30, 0x20, 0x0, 0x50, 0x39, 0x80, 0x2a, 0x37, 0x80, 0x1, 0xf, 0x5, 0x3, 0x80, 0x4, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x30, 0x3f, 0x20, 0x3, 0x91, 0x38, 0x80, 0x2c, 0x37, 0xcf, 0x80, 0x2f, 0x17, 0x80, 0xf, 0x1c, 0x80, 0x0, 0x5, 0x80, 0x30, 0x3f, 0x20, 0x3, 0x91, 0x38, 0x80, 0x2c, 0x37, 0x80, 0x28, 0x36, 0x20, 0x0, 0x8, 0x38, 0x80, 0x28, 0x37, 0xcf, 0x80, 0x2f, 0x17, 0x3, 0x80, 0x4, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x30, 0x3f, 0x20, 0x3, 0x91, 0x38, 0x80, 0x2c, 0x37, 0x80, 0x28, 0x36, 0x20, 0x0, 0x8, 0x38, 0x80, 0x28, 0x37, 0xcf, 0x80, 0x2f, 0x17, 0x80, 0xf, 0x1c, 0x80, 0x0, 0x5, 0x80, 0x30, 0x3f, 0x20, 0x3, 0x91, 0x38, 0x80, 0x2c, 0x37, 0x80, 0x28, 0x36, 0x20, 0x0, 0x8, 0x38, 0x80, 0x28, 0x37, 0x4f, 0x80, 0x2f, 0x17, 0x0, 0x80, 0x10, 0x80, 0x0, 0x3, 0x80, 0x30, 0x1f, 0x80, 0x0, 0x5, 0x20, 0x3, 0x91, 0x38, 0x80, 0x2c, 0x37, 0x3, 0x80, 0x30, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x2, 0x30, 0x20, 0x0, 0x40, 0x39, 0x38, 0x80, 0x28, 0x37, 0x80, 0x4, 0x30, 0x20, 0x0, 0x50, 0x39, 0x80, 0x2a, 0x37, 0x80, 0x1, 0x80, 0x2f, 0x17, 0x3, 0x80, 0x30, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x4, 0x30, 0x20, 0x0, 0x40, 0x39, 0x38, 0x80, 0x2a, 0x37, 0x80, 0x2, 0x30, 0x20, 0x0, 0x50, 0x39, 0x80, 0x28, 0x37, 0x80, 0x1, 0x80, 0x2f, 0x17, 0x1, 0x8a, 0x80, 0xab, 0xd, 0x22, 0x6c, 0x20, 0x3, 0x81, 0x80, 0x2c, 0x37, 0x80, 0x0, 0x80, 0x0, 0x3, 0x80, 0xf, 0x1c, 0x80, 0x40, 0x1f, 0x80, 0x1, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x2, 0x30, 0x20, 0x0, 0x40, 0x39, 0x38, 0x80, 0x28, 0x37, 0x3, 0x80, 0xf0, 0x1c, 0x80, 0x1, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x4, 0x30, 0x20, 0x0, 0x40, 0x39, 0x38, 0x80, 0x2a, 0x37, 0x3, 0x80, 0x2f, 0x17, 0x1, 0x89, 0x80, 0xca, 0xd, 0x22, 0x6c, 0x80, 0x10, 0x80, 0x0, 0x8f, 0x3, 0x80, 0x2, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x40, 0x3f, 0x80, 0x4, 0x30, 0x20, 0x0, 0x40, 0x39, 0x38, 0x2f, 0x3, 0x80, 0x3, 0x1c, 0x80, 0x0, 0x5, 0x80, 0x40, 0x3f, 0x20, 0x0, 0x40, 0x38, 0x80, 0x2, 0x30, 0x20, 0x0, 0x8, 0x38, 0x38, 0x6f, 0x4f, 0x80, 0x0, 0x20, 0x2, 0xe7, 0x2e, 0x1, 0x8a, 0x80, 0xc9, 0xd, 0x22, 0x6c, 0x80, 0x10, 0x80, 0x0, 0x8f, 0x3, 0x80, 0x2, 0x1f, 0x80, 0x0, 0x5, 0x80, 0x40, 0x3f, 0x80, 0x4, 0x30, 0x38, 0x2f, 0x3, 0x80, 0x3, 0x1c, 0x80, 0x0, 0x5, 0x80, 0x40, 0x3f, 0x20, 0x0, 0x40, 0x38, 0x80, 0x2, 0x30, 0x20, 0x0, 0x8, 0x38, 0x38, 0x6f, 0x4f, 0x80, 0x80, 0x20, 0x2, 0xe7, 0x2e, 0x1, 0x8a, 0x80, 0xcd, 0xd, 0x22, 0x6c, 0x18, 0xf, 0x20, 0x3, 0x81, 0x80, 0x2c, 0x37, 0x80, 0x2a, 0x37, 0x80, 0x28, 0x37, 0x80, 0x0, 0xcf, 0x18, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0x8, 0x38, 0x80, 0x28, 0x37, 0x80, 0x10, 0xcf, 0x18, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0x8, 0x39, 0x80, 0x28, 0x37, 0x80, 0x2a, 0x36, 0x20, 0x0, 0x8, 0x38, 0x80, 0x2a, 0x37, 0x80, 0x20, 0xcf, 0x18, 0x80, 0x2f, 0x17, 0x80, 0x28, 0x36, 0x20, 0x0, 0x8, 0x38, 0x80, 0x28, 0x37, 0x80, 0x30, 0x4f, 0x18, 0x80, 0x2f, 0x17, 0x6c, 0x80, 0x4, 0x30, 0x20, 0x0, 0x40, 0x39, 0x80, 0x2a, 0x37, 0x80, 0x2, 0x30, 0x20, 0x0, 0x48, 0x38, 0x80, 0x28, 0x37, 0x80, 0x0, 0x80, 0x2e, 0x17, 0x80, 0x2, 0x30, 0x20, 0x0, 0x49, 0x38, 0x80, 0x28, 0x37, 0x80, 0x1, 0x80, 0x2e, 0x17, 0x80, 0x2, 0x30, 0x20, 0x0, 0x4a, 0x38, 0x80, 0x28, 0x37, 0x80, 0x2, 0x80, 0x2e, 0x17, 0x80, 0x2, 0x30, 0x20, 0x0, 0x4b, 0x38, 0x80, 0x28, 0x37, 0x80, 0x3, 0x80, 0x2e, 0x17, 0x6c, 0xf, 0x38, 0x67, 0x5f, 0xdf, 0xbf, 0xbf, 0xbf, 0x0, 0x7, 0x18, 0x20, 0x23, 0x44, 0x48, 0x48, 0x0, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x0, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x7c, 0x82, 0x2, 0x7c, 0x80, 0x80, 0xfe, 0x0, 0x7c, 0x82, 0x2, 0x1c, 0x2, 0x82, 0x7c, 0x0, 0xc, 0x14, 0x24, 0x44, 0x84, 0xfe, 0x4, 0x0, 0xfe, 0x80, 0x80, 0x7c, 0x2, 0x82, 0x7c, 0x0, 0x7c, 0x82, 0x80, 0xfc, 0x82, 0x82, 0x7c, 0x0, 0x7c, 0x82, 0x2, 0x1e, 0x2, 0x2, 0x2, 0x0, 0x7c, 0x82, 0x82, 0x7c, 0x82, 0x82, 0x7c, 0x0, 0x7c, 0x82, 0x82, 0x7e, 0x2, 0x82, 0x7c, 0x0, 0x7c, 0x82, 0x2, 0x7e, 0x82, 0x82, 0x7e, 0x0, 0xfc, 0x82, 0x82, 0xfc, 0x82, 0x82, 0xfc, 0x0, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x0, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x0, 0x7c, 0x82, 0x80, 0xf0, 0x80, 0x82, 0x7c, 0x0, 0x7c, 0x82, 0x80, 0xf0, 0x80, 0x80, 0x80, }

  cpu = setupCPU()

  local data = love.filesystem.read("data", "boot.rom")

  data = love.data.encode("string", "hex", data)
 
  cpu.memory.hex_rom = data

  cpu:runUntilBreak()
  print("cpu is done initial run") 
end

--[[
function love.textinput(text)
  for i = 1, #text do
    local char = string.byte(text, i)
    console[2] = char

    cpu:trig_device(1)
  end
end
]]--

-- Take in a love keyconstant and return which bit in the controller byte
function keyToBit(key)
  local n
  if key == "rctrl" or key == "lctrl" then
    n = 0
  elseif key == "ralt" or key == "lalt" then
    n = 1
  elseif key == "rshift" or key == "lshift"  then
    n = 2
  elseif key == "escape" then
    n = 3
  elseif key == "up" then
    n = 4
  elseif key == "down" then
    n = 5
  elseif key == "left" then
    n = 6
  elseif key == "right" then
    n = 7
  else
    return 0
  end

  return bit.lshift(0x01, n)
end

function love.textinput(text)
  controller[3] = string.byte(string.sub(text,1,1))

  cpu:trig_device(8)
end

function love.keypressed(key)
  controller[2] = bit.bor(controller[2], keyToBit(key))
  
  local ascii

  if key == "backspace" then
    ascii = 0x08
  elseif key == "return" then
    ascii = 0x0d
  elseif key == "tab" then
    ascii = 0x09
  elseif key == "space" then
    ascii = 0x20
  elseif key == "delete" then
    ascii = 0x7f
  end

  if ascii then
    controller[3] = ascii
  end

  cpu:trig_device(8)
end

function love.keyreleased(key)
  controller[2] = bit.band(controller[2], bit.bnot(keyToBit(key)))
  controller[3] = 0

  cpu:trig_device(8)
end

frame = 0
function love.draw()
  frame = frame + 1
  print("\n=====[draw]=====\n")
  cpu:trig_device(2)
  print("draw vector done")

  love.graphics.push()
  love.graphics.scale(1,1)
  love.graphics.setColor(1,1,1)

  love.graphics.setBlendMode("alpha", "premultiplied")

  love.graphics.draw(screen.back)
  love.graphics.draw(screen.front)

  love.graphics.setBlendMode("alpha")
  
  love.graphics.pop()


  local dbg = "x: "..screen:readShort(8).." y: "..screen:readShort(10).." "
  dbg = dbg.."PS: "..table.concat(cpu.program_stack, " ").." "
  dbg = dbg.."frame: "..frame.." fps: "..love.timer.getFPS()

  love.graphics.setColor(1,0,0)
  love.graphics.print(dbg, 10, 300)

  love.graphics.setColor(0,1,1)
  love.graphics.print(console.stdout, 10, 310)
  
end

function love.filedropped(file)
  -- TODO: Reset devices
  cpu = setupCPU() 

  file:open("r")

  local data = file:read("data")

  data = love.data.encode("string", "hex", data)

  cpu.memory.hex_rom = data

  cpu:runUntilBreak()
end
